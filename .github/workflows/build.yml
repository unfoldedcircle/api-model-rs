name: Rust

on:
  push:
    paths:
      - '**/Cargo.toml'
      - 'src/**'
      - '.github/**/*.yml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  CARGO_TERM_COLOR: always
  BUILD_CHANGELOG: build-changelog.md

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - run: cargo test

      - name: Run clippy
        run: cargo clippy -- -D warnings

  changelog:
    name: Create changelog
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: "Create Changelog"
        run: |
          npm install -g conventional-changelog-cli
          conventional-changelog -p conventionalcommits -u -o ${{ env.BUILD_CHANGELOG }}
          cat ${{ env.BUILD_CHANGELOG }}

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: ${{ env.BUILD_CHANGELOG }}
          if-no-files-found: error
          retention-days: 3

  release:
    name: GitHub release
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    needs: changelog
    runs-on: ubuntu-24.04

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Extract archives from downloaded artifacts
        run: |
          # Files are wrapped in tar from actions/upload-artifact, then extracted into a directory by actions/download-artifact
          ls -lah
          for D in * 
            do if [ -d "${D}" ]; then
              echo "Archive directory: $D"
              ls -lah $D/*
              mv $D/* ./
            fi
          done;
          ls -lah

      # Checkout is required for the next `gh release delete` step
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: main

      # We have to delete the "latest" release, otherwise `softprops/action-gh-release` will only append the new artifact.
      # This simulates the old marvinpinto/action-automatic-releases action.
      - name: Remove previous pre-release
        run: |
          cd main
          gh release delete latest --cleanup-tag -y || true
        env:
          GH_TOKEN: ${{ github.token }}

      # Use conventional commit changelog, and append the GitHub generated changelog
      - name: Create Pre-Release
        uses: softprops/action-gh-release@v2
        if: "!contains(github.ref, 'tags/v')"
        with:
          prerelease: true
          tag_name: latest
          body_path: ${{ env.BUILD_CHANGELOG }}
          generate_release_notes: true
          name: "Development Build"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: "contains(github.ref, 'tags/v')"
        with:
          prerelease: false
          generate_release_notes: true
